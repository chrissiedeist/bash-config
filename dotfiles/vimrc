" Must set mapleader before vundnle loads plugins
let mapleader = ","

set nocompatible
filetype off                   " required!
filetype plugin indent off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Plugin 'gmarik/vundle'

" original repos on github
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-rails.git'
Plugin 'tpope/vim-markdown'
Plugin 'vim-ruby/vim-ruby'
Plugin 'kien/ctrlp.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'rking/ag.vim'
Plugin 'repeat.vim'
Plugin 'surround.vim'
Plugin 'slim-template/vim-slim'
Plugin 'tpope/vim-commentary'
Plugin 'matchit.zip'
Plugin 'ruby-matchit'
Plugin 'kshenoy/vim-signature'
Plugin 'chriskempson/vim-tomorrow-theme'
Plugin 'altercation/vim-colors-solarized'
Plugin 'Textile-for-VIM'
Plugin 'rodjek/vim-puppet'
Plugin 'godlygeek/tabular'
Plugin 'honza/vim-snippets'
Plugin 'kchmck/vim-coffee-script'
Plugin 'smerrill/vcl-vim-plugin'
Plugin 'bling/vim-airline'
Plugin 'evanmiller/nginx-vim-syntax'
Plugin 'scrooloose/syntastic'
Plugin 'mxw/vim-jsx'

syntax on
filetype plugin indent on     " required!

" Brief help
" :PluginList          - list configured bundles
" :PluginInstall(!)    - install(update) bundles
" :PluginSearch(!) foo - search(or refresh cache first) for foo
" :PluginClean(!)      - confirm(or auto-approve) removal of unused bundles

" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Plugin command are not allowed..

set runtimepath+=$GOROOT/misc/vim

if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif

  "ruby
  autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
  autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
  autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
  autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
  "improve autocomplete menu color
  highlight Pmenu ctermbg=238 gui=bold

  let g:airline_powerline_fonts = 1
  set guifont=Source\ Code\ Pro\ for\ Powerline:h12
endif

set rtp+=/usr/local/Cellar/go/1.0.3/misc/vim

set showcmd      " Show (partial) command in status line.
set showmatch    " Show matching brackets.
set ignorecase
set smartcase    " Do smart case matching
set incsearch    " Incremental search
set hlsearch
set autowrite    " Automatically save before commands like :next and :make
set hidden       " Hide buffers when they are abandoned
set mouse=a      " Enable mouse usage (all modes) in terminals
set title
set fileformat=unix
set number
set ts=2
set shiftwidth=2
set expandtab
set visualbell
set wrap
set linebreak " wrap only on word boundaries
set nolist  " list disables linebreak
set lbr
set ruler
set cursorline
" set cursorcolumn
set colorcolumn=100

" Use SilverSurfer instead of grep
set grepprg=ag
set grepformat=%f:%l:%m

" make backspace work normal (indent, eol, start)
set backspace=2

" allow backspace and cursor keys to cross line boundaries
set whichwrap+=<,>,h,l

" buffer navigation
map <c-pagedown> :bn<enter>
map <c-pageup> :bp<enter>
map <c-del> :bd<enter>

" navigate window splits
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-h> <c-w>h
map <c-l> <c-w>l

" Search for the current word using SilverSurfer (ag)
map <leader>aw :Ag <c-r>=expand("<cword>")<CR><CR>

" Run current file
map <leader>r :!clear && time ruby -Itest %<CR>
map <leader>R :!clear && time bundle exec ruby -Itest %<CR>
map <leader>s :!clear && time spring rake test TEST=%<CR>
map <leader>T :!clear && time spring rake test<CR>

" file browsing
map <leader>t :execute 'NERDTreeToggle ' . getcwd()<CR>
let NERDTreeIgnore=['\.vim$', '\.pyc$', '\~$']

" Quickly get rid of highlighting
map <leader>nh :noh<CR>
" Quick full screen toggle
map <leader>fs :set invfullscreen<CR>

" Navigate splits with arrow keys
nnoremap <Right> <C-w>l
nnoremap <Left> <C-w>h
nnoremap <Up> <C-w>k
nnoremap <Down> <C-w>j

autocmd FileType make set noexpandtab

" " setup statusline
set laststatus=2

" colorscheme solarized
if has('gui_running')
  set background=light
else
  " let g:solarized_termcolors=256
  set background=dark
endif

set foldmethod=manual

" Backup directories
if filewritable(".") && ! filewritable(".backup")
  silent execute '!umask 002; mkdir .backup'
endif
set backupdir=./.backup,.,/tmp
set directory=./.backup,/tmp

" :Rtags needs to exclude some files and directories that cause problems
" let g:rails_ctags_arguments='--exclude="*.*.js" --exclude="facebox.js" --exclude="*protected*" --exclude="themes"'
let g:rails_ctags_arguments='--languages=-javascript --exclude="*protected*" --exclude="themes" --exclude="lib/themes"'

" ctrlp settings
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.\(git\|hg\|svn\)$\|\(protected\|tmp\|public\/system\|vendor\)$',
  \ 'file': '\.exe$\|\.so$\|\.dat$\|\.jpg$'
  \ }

" show invisible characters
set list!
set listchars=tab:▸\ ,eol:¬

let g:syntastic_ruby_checkers = ['mri', 'rubocop']
